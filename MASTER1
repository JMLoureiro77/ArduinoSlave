/*Master1




Para referirse a los pines analogicos de esclavo:
 A0    14
 A1    15
 A2    16
 A3    17
 A4 y A5 usados por bus iic
 A6    20
 A7    21

*/

#include <Wire.h>

const int SLAVE_ADDRESS = 9;

byte a;

String request;
int inputInt[3];

int pinConf[19];
int nVar[10];
byte dw[19];
byte dr[19];
int ar[22];
int aw[12];

int dIN=1;    //digital in
int dOUTL=2;   //digital out start low
int dOUTH=3;  //digital out start high
int aOUT=4;   //analog out (PWM) UNO,NANO(3,5,6,9,10,11)
int dINP=5;   //digital input_pullup (inverted logic  1=low 0=high)


void setup ()  {
//  Wire.begin (D4,D3);   
 Wire.begin ();   
 Wire.setClockStretchLimit(40000);    // in Âµs
 Serial.begin (115200);  // start serial for Debug
 
}  // end of setup
//==================================================================================================
void loop(){
//==================================================================================================


if(pinConf[13]!= dOUTL){
  confPin(13, dOUTL);  //configuro del pin 13 como salidadigital start LOW
  }
 dW(13,HIGH);
  delay (500);   
 dW(13,LOW);
  delay (750);   
}  // end of loop
//==================================================================================================
void Comm(String request){
  char buff[sizeof(request)];
  request.toCharArray(buff, sizeof(request));
  Wire.beginTransmission (SLAVE_ADDRESS);
  Wire.write(buff); 
  Wire.endTransmission ();   
  readResponse();
}
void readResponse(){
  String inputString = "";
  byte ind=0;
  Wire.requestFrom (SLAVE_ADDRESS, 1); 
  char inChar = Wire.read(); 
  int t = inChar;
  Wire.requestFrom (SLAVE_ADDRESS, t);
    for(int i=0;i<t;i++){
      char inChar = (char)Wire.read();
    if (inChar != '.') {
      inputString += inChar;
      }
    if (inChar == '.') {
      inputInt[ind]=inputString.toInt();
      inputString = "";
      ind++;
      }
  }//for
       Serial.println(inputInt[0]);
       Serial.println(inputInt[1]);
       Serial.println(inputInt[2]);

  }
//=====================================================================================
// dW() digital write (slave pin, value )
//=====================================================================================
void dW(int pin, bool val){
  request="";
  request+="1.";
  request+=pin;
  request+=".";
  request+=val;
  request+=".";
  Comm(request);
  dw[pin]=inputInt[2];
}//=====================================================================================
// dR() digital Read (slave pin )
//=====================================================================================
void dR(int pin){
  request="";
  request+="2.";
  request+=pin;
  request+=".0.";
  Comm(request);
  dr[pin]=inputInt[2];
}
//=====================================================================================
// aW() (slave pin, value )
//=====================================================================================
void aW(int pin, int aWVal){//analog write
  request="";
  request+="3.";
  request+=pin;
  request+=".";
  request+=aWVal;
  request+=".";
  Comm(request);
  aw[pin]=inputInt[2];
}
//=====================================================================================
// anlogRead (Slave pin)
//=====================================================================================
void aR(int pin){        //analog read
  request="";
  request+="4.";
  request+=pin;
  request+=".0.";
  Comm(request);
  ar[pin]=inputInt[2];
}
//=====================================================================================
// send variable value(Variable number, value)
//=====================================================================================
void sV(int nVar, int nVarV){ //send variable, store variable in slave
  request="";
  request+="5.";
  request+=nVar;
  request+=".";
  request+=nVarV;
  request+=".";
  Comm(request);
}
//=====================================================================================
// get variable value(Variable number)
//=====================================================================================
void gV(int Var){     //get nVar
  request="";
  request+="6.";
  request+=Var;
  request+=".0.";
  Comm(request);
  nVar[Var]=inputInt[2];
}
//=====================================================================================
// configure slave pin
//=====================================================================================
void confPin(int SlavePin, int Mode){
/*  confVal
  1   digital in
  2   digital out start low
  3   digital out start high
  4   analog out (PWM) UNO,NANO(3,5,6,9,10,11)
  5   digital input_pullup (invert logic  1=low 0=high)

  defaut state is input if you not change nothing
  send 0 to analog pins (14(A0),15(A1),16(A2),17(A3)) to return to adc if you have used in digital mode
   18 & 19 used by IIC bus
   Nano (20(A6) & 21(A7)) only adc mode
*/
if(Mode==4 & (SlavePin != 3||5||6||9||10||11)){
  //Serial.println("not pwm pin");
  }else{
  request="";
  request+="7.";
  request+=SlavePin;
  request+=".";
  request+=Mode;
  request+=".";
  Comm(request);
  pinConf[SlavePin]=inputInt[2];  
  }
}//=====================================================================================
// get slave pin conf
//=====================================================================================
void gPinConf(int SlavePin){
  request="";
  request+="8.";
  request+=SlavePin;
  request+=".0.";
  Comm(request);
  pinConf[SlavePin]=inputInt[2];
}
//=====================================================================================
// Clear slave pin configuration
//=====================================================================================
void clearSlavePinConf(){
  request = "9.0.0.";
  Comm(request);
}
